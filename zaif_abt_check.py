#!/usr/bin/env python

from zaifapi import ZaifPublicApi 
from pprint import pprint 
from decimal import *

import configparser
import os
import time

config = configparser.SafeConfigParser()
config.read('./config.ini', 'UTF-8')
zaif = ZaifPublicApi()

false = False
debug = True
money = 10000.0

os.system('clear')

cpairs_btc_jpy=[{"description": "\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u30fb\u65e5\u672c\u5186\u306e\u53d6\u5f15\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059", "id": 1, "aux_unit_point": 0, "item_japanese": "\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3", "name": "BTC/JPY", "aux_japanese": "\u65e5\u672c\u5186", "item_unit_min": 0.0001, "aux_unit_min": 5.0, "is_token": false, "seq": 0, "item_unit_step": 0.0001, "title": "BTC/JPY", "currency_pair": "btc_jpy", "event_number": 0, "aux_unit_step": 5.0}]
cpairs_xem_jpy=[{"aux_unit_point": 4, "title": "XEM/JPY", "seq": 1, "item_unit_step": 0.1, "id": 4, "name": "XEM/JPY", "is_token": false, "item_japanese": "XEM", "currency_pair": "xem_jpy", "aux_unit_step": 0.0001, "description": "XEM\u30fb\u65e5\u672c\u5186\u306e\u53d6\u5f15\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059", "aux_unit_min": 0.0001, "event_number": 0, "item_unit_min": 0.1, "aux_japanese": "\u65e5\u672c\u5186"}]
cpairs_xem_btc=[{"description": "XEM\u30fb\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u306e\u53d6\u5f15\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059", "id": 5, "aux_unit_point": 8, "item_japanese": "XEM", "name": "XEM/BTC", "aux_japanese": "\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3", "item_unit_min": 1.0, "aux_unit_min": 1e-08, "is_token": false, "seq": 2, "item_unit_step": 1.0, "title": "XEM/BTC", "currency_pair": "xem_btc", "event_number": 0, "aux_unit_step": 1e-08}]

depth_xem_btc={"asks": [[5.012e-05, 7429.0], [5.019e-05, 59.0], [5.02e-05, 244.0], [5.021e-05, 8.0], [5.05e-05, 2198.0], [5.053e-05, 7224.0], [5.068e-05, 147124.0], [5.069e-05, 2000.0], [5.074e-05, 1.0], [5.083e-05, 2400.0], [5.084e-05, 502.0], [5.085e-05, 544.0], [5.094e-05, 2000.0], [5.099e-05, 175.0], [5.1e-05, 4626.0], [5.12e-05, 2029.0], [5.121e-05, 1391.0], [5.15e-05, 2586.0], [5.151e-05, 82.0], [5.18e-05, 13289.0], [5.189e-05, 3115.0], [5.19e-05, 509.0], [5.193e-05, 1200.0], [5.194e-05, 4706.0], [5.2e-05, 8673.0], [5.247e-05, 2966.0], [5.275e-05, 2000.0], [5.289e-05, 10.0], [5.395e-05, 50.0], [5.454e-05, 713.0], [5.49e-05, 550.0], [5.5e-05, 15755.0], [5.51e-05, 4550.0], [5.555e-05, 1180.0], [5.586e-05, 5557.0], [5.6e-05, 200.0], [5.631e-05, 12.0], [5.641e-05, 12.0], [5.648e-05, 12.0], [5.65e-05, 1372.0], [5.651e-05, 12.0], [5.661e-05, 12.0], [5.695e-05, 60.0], [5.711e-05, 11.0], [5.721e-05, 11.0], [5.731e-05, 11.0], [5.735e-05, 300.0], [5.741e-05, 11.0], [5.751e-05, 11.0], [5.761e-05, 11.0], [5.771e-05, 11.0], [5.778e-05, 12.0], [5.78e-05, 2594.0], [5.781e-05, 11.0], [5.782e-05, 2967.0], [5.788e-05, 12.0], [5.791e-05, 11.0], [5.799e-05, 70.0], [5.8e-05, 53.0], [5.801e-05, 11.0], [5.811e-05, 11.0], [5.821e-05, 11.0], [5.831e-05, 11.0], [5.888e-05, 799.0], [5.89e-05, 4500.0], [5.9e-05, 3050.0], [5.902e-05, 2592.0], [5.94e-05, 6.0], [5.99e-05, 1000.0], [5.995e-05, 70.0], [5.999e-05, 14470.0], [6e-05, 5944.0], [6.003e-05, 20.0], [6.01e-05, 10849.0], [6.1e-05, 2000.0], [6.103e-05, 20.0], [6.12e-05, 2243.0], [6.183e-05, 85.0], [6.193e-05, 85.0], [6.2e-05, 150.0], [6.215e-05, 4536.0], [6.29e-05, 3074.0], [6.295e-05, 80.0], [6.3e-05, 27.0], [6.4e-05, 224.0], [6.418e-05, 100.0], [6.423e-05, 2072.0], [6.438e-05, 22.0], [6.488e-05, 101.0], [6.499e-05, 480.0], [6.5e-05, 1475.0], [6.525e-05, 31.0], [6.595e-05, 90.0], [6.7e-05, 434.0], [6.736e-05, 99.0], [6.76e-05, 268.0], [6.799e-05, 1080.0], [6.8e-05, 6667.0], [6.886e-05, 200.0], [6.9e-05, 17.0], [6.936e-05, 2085.0], [6.964e-05, 45.0], [6.965e-05, 55.0], [6.999e-05, 360.0], [7e-05, 23877.0], [7.123e-05, 173.0], [7.199e-05, 20.0], [7.2e-05, 592.0], [7.313e-05, 20060.0], [7.4e-05, 1096.0], [7.479e-05, 700.0], [7.499e-05, 250.0], [7.5e-05, 9027.0], [7.6e-05, 6.0], [7.7e-05, 3669.0], [7.793e-05, 65.0], [7.8e-05, 1049.0], [7.9e-05, 102.0], [7.95e-05, 10000.0], [7.98e-05, 10167.0], [7.999e-05, 250.0], [8e-05, 29519.0], [8.001e-05, 1791.0], [8.072e-05, 140.0], [8.084e-05, 1792.0], [8.089e-05, 136.0], [8.1e-05, 99.0], [8.12e-05, 800.0], [8.16e-05, 3704.0], [8.3e-05, 7561.0], [8.4e-05, 308.0], [8.499e-05, 100.0], [8.5e-05, 2101.0], [8.502e-05, 176.0], [8.539e-05, 3354.0], [8.6e-05, 13700.0], [8.66e-05, 210.0], [8.7e-05, 130.0], [8.71e-05, 50.0], [8.8e-05, 130.0], [8.828e-05, 1410.0], [8.85e-05, 13.0], [8.9e-05, 250.0], [8.95e-05, 10000.0], [8.999e-05, 600.0], [9e-05, 30150.0], [9.005e-05, 1900.0], [9.067e-05, 100.0], [9.099e-05, 72.0], [9.1e-05, 625.0]], "bids": [[5e-05, 4520.0], [4.972e-05, 201.0], [4.96e-05, 2000.0], [4.959e-05, 1805.0], [4.958e-05, 121.0], [4.957e-05, 1323.0], [4.951e-05, 363.0], [4.95e-05, 940.0], [4.94e-05, 177.0], [4.93e-05, 123.0], [4.929e-05, 206.0], [4.923e-05, 203.0], [4.915e-05, 2000.0], [4.91e-05, 500.0], [4.903e-05, 2000.0], [4.902e-05, 25803.0], [4.9e-05, 200.0], [4.89e-05, 800.0], [4.87e-05, 2.0], [4.862e-05, 147124.0], [4.86e-05, 1350.0], [4.85e-05, 2935.0], [4.842e-05, 61.0], [4.824e-05, 147124.0], [4.809e-05, 500.0], [4.8e-05, 2831.0], [4.759e-05, 941.0], [4.729e-05, 106.0], [4.711e-05, 9.0], [4.7e-05, 5721.0], [4.69e-05, 2892.0], [4.689e-05, 22148.0], [4.688e-05, 554.0], [4.67e-05, 20.0], [4.63e-05, 1400.0], [4.61e-05, 2759.0], [4.6e-05, 24707.0], [4.598e-05, 1000.0], [4.58e-05, 100.0], [4.508e-05, 1000.0], [4.5e-05, 9652.0], [4.497e-05, 68.0], [4.487e-05, 395.0], [4.469e-05, 20.0], [4.468e-05, 62.0], [4.462e-05, 100.0], [4.408e-05, 1000.0], [4.401e-05, 179.0], [4.4e-05, 49.0], [4.374e-05, 1217.0], [4.33e-05, 23.0], [4.311e-05, 5.0], [4.3e-05, 1073.0], [4.295e-05, 99.0], [4.29e-05, 4747.0], [4.26e-05, 50.0], [4.25e-05, 1500.0], [4.236e-05, 5390.0], [4.232e-05, 240.0], [4.2e-05, 188.0], [4.191e-05, 1193.0], [4.179e-05, 50.0], [4.101e-05, 10.0], [4.1e-05, 1441.0], [4.087e-05, 100.0], [4.07e-05, 174.0], [4.05e-05, 36.0], [4.001e-05, 802.0], [4e-05, 7189.0], [3.988e-05, 2200.0], [3.971e-05, 715.0], [3.95e-05, 1878.0], [3.92e-05, 200.0], [3.911e-05, 2786.0], [3.903e-05, 100.0], [3.9e-05, 742.0], [3.891e-05, 1276.0], [3.85e-05, 4000.0], [3.825e-05, 6535.0], [3.8e-05, 2628.0], [3.792e-05, 2605.0], [3.77e-05, 1600.0], [3.7e-05, 8.0], [3.66e-05, 434.0], [3.635e-05, 800.0], [3.633e-05, 800.0], [3.616e-05, 2200.0], [3.588e-05, 360.0], [3.537e-05, 68.0], [3.502e-05, 50.0], [3.501e-05, 200.0], [3.5e-05, 2240.0], [3.498e-05, 5.0], [3.314e-05, 1000.0], [3.311e-05, 12.0], [3.308e-05, 1000.0], [3.209e-05, 4104.0], [3.2e-05, 4445.0], [3.169e-05, 250.0], [3.13e-05, 134.0], [3.126e-05, 888.0], [3.101e-05, 6761.0], [3.1e-05, 2655.0], [3.096e-05, 1001.0], [3.011e-05, 13.0], [3.001e-05, 1200.0], [3e-05, 19045.0], [2.9e-05, 771.0], [2.85e-05, 1040.0], [2.82e-05, 1286.0], [2.813e-05, 1.0], [2.802e-05, 100.0], [2.8e-05, 645.0], [2.75e-05, 50.0], [2.711e-05, 15.0], [2.706e-05, 56.0], [2.705e-05, 30.0], [2.701e-05, 986.0], [2.7e-05, 2208.0], [2.69e-05, 13197.0], [2.6e-05, 3000.0], [2.568e-05, 4996.0], [2.521e-05, 9635.0], [2.511e-05, 30.0], [2.501e-05, 6599.0], [2.5e-05, 10362.0], [2.405e-05, 35.0], [2.4e-05, 1400.0], [2.35e-05, 250.0], [2.3e-05, 6284.0], [2.247e-05, 1.0], [2.2e-05, 300.0], [2.15e-05, 5687.0], [2.1e-05, 747.0], [2.05e-05, 350.0], [2.02e-05, 9359.0], [2.011e-05, 16.0], [2.01e-05, 272.0], [2.001e-05, 2700.0], [2e-05, 145119.0], [1.9e-05, 1227.0], [1.75e-05, 450.0], [1.715e-05, 4619.0], [1.611e-05, 20.0], [1.6e-05, 500.0], [1.501e-05, 1000.0], [1.5e-05, 5778.0], [1.45e-05, 2278.0], [1.35e-05, 600.0], [1.311e-05, 30.0]]}
depth_xem_jpy={"asks": [[49.2102, 93.0], [49.24, 100.0], [49.2661, 300.0], [49.2662, 19109.7], [49.3001, 2000.0], [49.32, 2.6], [49.34, 3.9], [49.38, 2.6], [49.39, 913.0], [49.4, 12487.9], [49.4109, 300.0], [49.43, 2.6], [49.45, 7.8], [49.4633, 10.2], [49.4662, 500.0], [49.5, 5670.1], [49.5635, 10.2], [49.6, 2238.0], [49.6001, 1800.0], [49.63, 80.0], [49.6499, 300.0], [49.65, 500.0], [49.69, 12832.3], [49.7, 12084.0], [49.71, 3.9], [49.72, 3.9], [49.74, 3.9], [49.7475, 2.5], [49.75, 9002.6], [49.77, 3.9], [49.8, 248.0], [49.84, 3.9], [49.8799, 500.0], [49.9, 12982.0], [49.9053, 509055.0], [49.95, 100.0], [49.9903, 121.0], [49.9997, 410.0], [49.9998, 2814.0], [49.9999, 1863.0], [50.0, 160475.6], [50.0021, 0.4], [50.03, 3.9], [50.0399, 300.0], [50.04, 3.9], [50.05, 1099.0], [50.0998, 59.0], [50.1, 1649.0], [50.145, 1158.0], [50.15, 10420.0], [50.19, 500.0], [50.1989, 500.0], [50.199, 500.0], [50.2, 17371.0], [50.22, 7.8], [50.24, 3071.9], [50.271, 400.0], [50.29, 3.9], [50.3, 4254.7], [50.33, 4890.0], [50.339, 15104.0], [50.34, 1011.7], [50.37, 3.9], [50.38, 3.9], [50.4, 2042.0], [50.45, 500.0], [50.452, 600.0], [50.4875, 25.0], [50.498, 1213.0], [50.4999, 599.0], [50.5, 56747.2], [50.55, 500.0], [50.6, 301.0], [50.7, 3285.0], [50.71, 5061.0], [50.715, 2024.0], [50.75, 300.0], [50.751, 400.0], [50.7689, 332.0], [50.77, 2000.0], [50.7999, 40.0], [50.8, 52288.0], [50.85, 1000.0], [50.855, 500.0], [50.872, 600.0], [50.89, 2016.0], [50.899, 5500.0], [50.9, 1899.0], [50.9389, 316468.0], [50.976, 123.0], [50.9875, 25.0], [50.9943, 4107.0], [50.9983, 600.0], [50.999, 1293.0], [50.9999, 40.0], [51.0, 83913.0], [51.0968, 144.0], [51.1, 16957.0], [51.12, 1078.0], [51.175, 600.0], [51.2, 29587.0], [51.21, 5000.0], [51.23, 500.0], [51.25, 2463.0], [51.3, 12375.0], [51.4, 47025.0], [51.4444, 5719.0], [51.4875, 25.0], [51.488, 169.7], [51.489, 500.0], [51.49, 6124.0], [51.4999, 40.0], [51.5, 32765.0], [51.6, 25255.0], [51.65, 2580.0], [51.66, 40043.0], [51.6689, 670.2], [51.7, 501.0], [51.7009, 1252.0], [51.74, 2000.0], [51.75, 4210.0], [51.8, 44407.7], [51.81, 2.6], [51.8157, 9.7], [51.84, 3.9], [51.845, 44.0], [51.88, 200.0], [51.8865, 3000.0], [51.8899, 2000.0], [51.899, 500.0], [51.9, 15787.0], [51.9202, 9.7], [51.98, 5669.0], [51.9875, 25.0], [51.99, 100.0], [51.995, 520.0], [51.9998, 2000.0], [51.9999, 625.0], [52.0, 395996.9], [52.0001, 100.0], [52.0251, 9.7], [52.03, 3.9], [52.04, 3.9], [52.05, 3.9], [52.06, 3.9], [52.07, 3.9], [52.1, 10675.6], [52.1027, 500.0], [52.1031, 500.0], [52.12, 1502.6]], "bids": [[49.2, 3613.8], [49.16, 3177.9], [49.154, 6618.0], [49.1203, 193.0], [49.1012, 2500.0], [49.1, 16697.6], [49.0678, 10.2], [49.05, 5994.0], [49.045, 100.0], [49.0132, 9000.0], [49.0127, 1446.0], [49.0125, 111.0], [49.012, 4067.0], [49.01, 1301.0], [49.0088, 5000.0], [49.0003, 25.0], [49.0001, 8265.0], [49.0, 84839.0], [48.9998, 6.2], [48.999, 2459.0], [48.98, 20439.0], [48.9692, 812.3], [48.9582, 144.0], [48.95, 12.0], [48.91, 3.9], [48.9002, 194.0], [48.9001, 10.0], [48.9, 4689.1], [48.8979, 787.0], [48.885, 12438.0], [48.8789, 103341.0], [48.8614, 3000.0], [48.8613, 3067.0], [48.8601, 14.0], [48.8522, 6.0], [48.85, 100.0], [48.845, 100.0], [48.8009, 500.0], [48.8001, 10.0], [48.8, 18211.0], [48.75, 2341.0], [48.74, 800.0], [48.71, 615.0], [48.7011, 500.0], [48.7001, 10.0], [48.7, 3938.1], [48.6888, 3358.0], [48.6731, 10.3], [48.65, 278.0], [48.62, 90.0], [48.605, 3.0], [48.6002, 242.0], [48.6001, 10.0], [48.6, 19214.0], [48.59, 6051.0], [48.5568, 6134.0], [48.55, 4376.0], [48.53, 1000.0], [48.52, 5000.0], [48.511, 1000.0], [48.5101, 350.0], [48.51, 5050.0], [48.505, 3.0], [48.501, 126.0], [48.5005, 25.0], [48.5001, 5010.0], [48.5, 48990.0], [48.4801, 20.0], [48.45, 1387.0], [48.423, 500.0], [48.405, 6.0], [48.4001, 3525.0], [48.4, 19820.0], [48.362, 3856.0], [48.36, 6.5], [48.326, 1100.0], [48.32, 13.0], [48.3195, 500.0], [48.305, 6.0], [48.3004, 367.0], [48.3003, 8695.0], [48.3, 12688.0], [48.2818, 10.4], [48.26, 89.0], [48.25, 6932.0], [48.24, 2500.0], [48.219, 15001.0], [48.2101, 1000.0], [48.21, 4755.0], [48.205, 3.0], [48.2002, 123.0], [48.2, 17343.6], [48.1845, 10.4], [48.175, 6311.0], [48.15, 4762.0], [48.11, 10000.0], [48.105, 9.0], [48.1001, 10.0], [48.1, 39718.0], [48.09, 6.5], [48.0876, 10.4], [48.0677, 105.0], [48.051, 250.0], [48.05, 6.0], [48.045, 100.0], [48.03, 1000.0], [48.02, 300.0], [48.01, 30940.0], [48.008, 1335.0], [48.005, 2083.0], [48.004, 13286.0], [48.002, 3115.0], [48.0011, 302.0], [48.0006, 50.0], [48.0004, 583.0], [48.0003, 25.0], [48.0002, 80.0], [48.0001, 13030.0], [48.0, 214128.7], [47.9999, 0.1], [47.965, 800.0], [47.952, 600.0], [47.921, 7268.0], [47.91, 3.9], [47.905, 3.0], [47.9001, 430.0], [47.9, 1450.0], [47.8954, 1000.0], [47.89, 185.9], [47.888, 200.0], [47.8811, 3413.0], [47.88, 3.9], [47.8776, 200.0], [47.87, 3.9], [47.85, 200.0], [47.8266, 50.0], [47.82, 241.0], [47.805, 5.0], [47.8001, 153.0], [47.8, 20688.6], [47.785, 50000.0], [47.77, 1000.0], [47.75, 17546.0], [47.748, 150.0], [47.7345, 301.0], [47.72, 3.0], [47.7154, 105.0], [47.71, 25.0], [47.705, 3.0], [47.7001, 30.0]]}
depth_btc_jpy={"asks": [[991035.0, 0.3099], [991200.0, 0.01], [991460.0, 0.03], [991795.0, 0.1139], [991800.0, 0.003], [991835.0, 0.01], [991880.0, 0.12], [991895.0, 0.048], [991955.0, 0.001], [991960.0, 0.03], [992000.0, 0.6111], [992005.0, 0.0011], [992100.0, 0.003], [992250.0, 0.0025], [992400.0, 0.003], [992500.0, 0.4021], [992525.0, 0.001], [992555.0, 0.0008], [992630.0, 0.05], [992650.0, 0.005], [992700.0, 0.003], [992985.0, 0.01], [992990.0, 0.12], [993000.0, 2.9527], [993005.0, 0.008], [993045.0, 0.01], [993075.0, 0.0613], [993155.0, 0.12], [993200.0, 0.1518], [993250.0, 0.0025], [993300.0, 0.003], [993335.0, 0.05], [993500.0, 1.02], [993515.0, 0.005], [993600.0, 0.003], [993745.0, 1.5], [993800.0, 0.7], [993855.0, 0.01], [993900.0, 1.023], [993965.0, 0.01], [993990.0, 0.0037], [994000.0, 0.4534], [994005.0, 1.0107], [994015.0, 0.005], [994030.0, 0.12], [994035.0, 0.0009], [994050.0, 0.0107], [994175.0, 0.005], [994190.0, 0.0154], [994200.0, 0.103], [994250.0, 0.0025], [994300.0, 0.05], [994500.0, 0.008], [994515.0, 0.005], [994615.0, 0.012], [994630.0, 0.002], [994635.0, 0.003], [994680.0, 0.003], [994760.0, 0.12], [994775.0, 0.003], [994795.0, 0.1139], [994800.0, 0.2191], [994900.0, 1.5], [994975.0, 0.003], [994995.0, 0.059], [995000.0, 3.0006], [995150.0, 0.0001], [995500.0, 0.205], [995550.0, 0.0598], [995605.0, 0.002], [995685.0, 0.003], [995950.0, 0.1903], [995990.0, 0.7982], [996000.0, 2.0877], [996010.0, 0.003], [996100.0, 0.0033], [996495.0, 0.003], [996500.0, 0.003], [996600.0, 0.017], [996615.0, 0.0757], [996705.0, 0.0052], [996775.0, 0.0202], [996800.0, 0.05], [996995.0, 0.119], [997000.0, 1.1622], [997020.0, 0.003], [997070.0, 0.003], [997305.0, 0.003], [997500.0, 0.0156], [997980.0, 2.0], [998000.0, 1.2911], [998050.0, 0.05], [998090.0, 1.7735], [998150.0, 0.1], [998200.0, 0.0046], [998500.0, 0.2961], [998550.0, 0.16], [998630.0, 0.02], [998900.0, 0.2], [998985.0, 0.1085], [999000.0, 3.3756], [999005.0, 0.2258], [999100.0, 0.12], [999380.0, 0.0201], [999490.0, 0.15], [999500.0, 0.003], [999510.0, 1.5], [999555.0, 0.4], [999790.0, 0.01], [999880.0, 0.01], [999900.0, 1.007], [999950.0, 0.004], [999970.0, 0.0661], [999980.0, 0.001], [999990.0, 0.01], [999995.0, 0.1654], [1000000.0, 11.3578], [1000085.0, 0.15], [1000100.0, 0.001], [1000500.0, 0.001], [1001000.0, 0.0391], [1001020.0, 0.6526], [1001190.0, 0.03], [1001240.0, 0.0001], [1001565.0, 0.03], [1001690.0, 0.03], [1001900.0, 0.7], [1001990.0, 0.0037], [1002000.0, 0.6472], [1002040.0, 0.0613], [1002070.0, 0.002], [1002100.0, 0.0593], [1002220.0, 17.7358], [1002500.0, 0.2454], [1002555.0, 0.12], [1002840.0, 0.35], [1003000.0, 0.0384], [1003085.0, 0.03], [1003300.0, 0.117], [1003500.0, 0.001], [1003800.0, 0.2], [1003990.0, 0.0137], [1004000.0, 0.338], [1004085.0, 0.03], [1004165.0, 0.01], [1004190.0, 0.12], [1004490.0, 0.02], [1004700.0, 0.0001], [1004855.0, 0.1], [1004975.0, 0.0001]], "bids": [[990765.0, 0.0998], [990720.0, 0.1711], [990490.0, 0.0001], [990190.0, 0.0967], [990100.0, 0.1268], [989820.0, 0.1], [989760.0, 0.0761], [989730.0, 0.26], [989725.0, 0.0527], [989720.0, 4.4854], [989480.0, 0.53], [989245.0, 0.0878], [989240.0, 0.2235], [989025.0, 0.02], [989020.0, 0.5613], [989015.0, 0.246], [989010.0, 0.269], [989005.0, 0.476], [989000.0, 21.4665], [988980.0, 0.0888], [988925.0, 0.0142], [988915.0, 0.001], [988830.0, 0.12], [988815.0, 0.0202], [988800.0, 0.003], [988750.0, 0.0525], [988600.0, 0.0102], [988595.0, 0.0101], [988535.0, 0.006], [988505.0, 0.9147], [988500.0, 0.183], [988445.0, 0.006], [988335.0, 0.05], [988320.0, 0.0202], [988300.0, 0.017], [988285.0, 0.03], [988245.0, 0.01], [988200.0, 0.003], [988180.0, 0.0011], [988010.0, 0.0037], [988005.0, 0.12], [988000.0, 2.7588], [987900.0, 0.003], [987840.0, 0.03], [987710.0, 0.0181], [987705.0, 0.1139], [987700.0, 0.001], [987600.0, 0.8361], [987595.0, 0.1432], [987530.0, 0.006], [987525.0, 0.013], [987500.0, 1.5051], [987440.0, 0.001], [987340.0, 0.03], [987300.0, 0.003], [987245.0, 0.0025], [987200.0, 0.0006], [987000.0, 1.1887], [986705.0, 0.3059], [986700.0, 0.1763], [986690.0, 0.1114], [986680.0, 0.0415], [986670.0, 0.1009], [986505.0, 0.0015], [986500.0, 1.1602], [986300.0, 0.0127], [986295.0, 0.0061], [986100.0, 0.003], [986010.0, 0.0037], [986005.0, 0.196], [986000.0, 0.4562], [985800.0, 0.003], [985745.0, 0.1], [985500.0, 0.0021], [985320.0, 1.7736], [985315.0, 0.02], [985230.0, 0.6], [985165.0, 0.002], [985070.0, 0.006], [985065.0, 0.166], [985060.0, 0.103], [985050.0, 0.116], [985005.0, 11.0], [985000.0, 0.4089], [984985.0, 0.0111], [984950.0, 0.752], [984870.0, 0.01], [984860.0, 0.0006], [984800.0, 0.0203], [984750.0, 0.12], [984580.0, 0.0119], [984575.0, 0.006], [984570.0, 0.0426], [984490.0, 0.0101], [984300.0, 0.0011], [984155.0, 0.006], [984125.0, 0.0518], [984115.0, 0.12], [984055.0, 0.0132], [984010.0, 0.0037], [984005.0, 0.0458], [984000.0, 1.7556], [983995.0, 0.1402], [983770.0, 0.017], [983565.0, 0.002], [983465.0, 0.1301], [983400.0, 1.02], [983385.0, 0.0061], [983380.0, 0.0101], [983375.0, 0.0061], [983370.0, 0.0101], [983200.0, 0.5], [983140.0, 0.0001], [983000.0, 0.2324], [982875.0, 0.064], [982695.0, 0.001], [982505.0, 0.284], [982500.0, 0.2495], [982100.0, 0.01], [982055.0, 0.017], [982050.0, 0.0221], [982010.0, 0.0038], [982005.0, 0.02], [982000.0, 1.1547], [981680.0, 17.7358], [981200.0, 1.02], [981100.0, 1.62], [981005.0, 0.5896], [981000.0, 9.2184], [980990.0, 0.0101], [980670.0, 0.0071], [980210.0, 0.0006], [980100.0, 0.001], [980035.0, 0.0067], [980025.0, 0.0269], [980015.0, 0.56], [980005.0, 3.0003], [980000.0, 24.0733], [979800.0, 0.002], [979300.0, 0.003], [979200.0, 0.003], [979050.0, 0.2314], [979005.0, 0.0204], [979000.0, 0.0261], [978905.0, 0.2], [978900.0, 0.006], [978750.0, 0.05], [978660.0, 0.0204], [978500.0, 0.15], [978335.0, 0.0102]]}

ticker_btc_jpy={"last": 991010.0, "high": 1020000.0, "low": 960010.0, "vwap": 987768.2294, "volume": 14869.6504, "bid": 990520.0, "ask": 991010.0}
ticker_xem_jpy={"last": 49.1499, "high": 51.6689, "low": 43.2999, "vwap": 46.8248, "volume": 82224058.5, "bid": 49.02, "ask": 49.1499}
ticker_xem_btc={"last": 4.957e-05, "high": 5.2e-05, "low": 4.354e-05, "vwap": 0.0, "volume": 3919203.0, "bid": 4.957e-05, "ask": 4.959e-05}

while True:
    for coin in config['coins']:
        if coin == 'btc':
            continue
#       print(coin)

# name
        btc_jpy='btc_jpy'
        coin_jpy=coin + '_jpy'
        coin_btc=coin + '_btc'
        
# http request pairs minimal step
# item/aux  Ex.) BTC/JPY   BTC=aux JPY=item
#       btc_jpy_pairs  = zaif.currency_pairs('btc_jpy')
#       coin_jpy_pairs = zaif.currency_pairs(coin_jpy)
#       coin_btc_pairs = zaif.currency_pairs(coin_btc)
        btc_jpy_pairs = cpairs_btc_jpy
        coin_jpy_pairs = cpairs_xem_jpy 
        coin_btc_pairs = cpairs_xem_btc

        btc_jpy_pairs_aux_step = btc_jpy_pairs[0]['aux_unit_step']
        coin_jpy_pairs_aux_step = coin_jpy_pairs[0]['aux_unit_step']
        coin_btc_pairs_aux_step = coin_btc_pairs[0]['aux_unit_step']
        btc_jpy_pairs_item_step = btc_jpy_pairs[0]['item_unit_step']
        coin_jpy_pairs_item_step = coin_jpy_pairs[0]['item_unit_step']
        coin_btc_pairs_item_step = coin_btc_pairs[0]['item_unit_step']

# http request board item
#        btc_jpy_depth = zaif.depth('btc_jpy')
#        coin_jpy_depth = zaif.depth(coin_jpy)
#        coin_btc_depth = zaif.depth(coin_btc)
        btc_jpy_depth  = depth_btc_jpy
        coin_jpy_depth = depth_xem_jpy
        coin_btc_depth = depth_xem_btc

# http request ticker
#        btc_jpy_ticker  = zaif.ticker('btc_jpy')
#        coin_jpy_ticker = zaif.ticker(coin_jpy)
#        coin_btc_ticker = zaif.ticker(coin_btc)
        btc_jpy_ticker  = ticker_btc_jpy
        coin_jpy_ticker = ticker_xem_jpy
        coin_btc_ticker = ticker_xem_btc

        print( 'aux :btc_jpy{0} coin_jpy{1} coin_btc{2}'.format( btc_jpy_pairs_aux_step ,coin_jpy_pairs_aux_step , coin_btc_pairs_aux_step))
        print( 'item:btc_jpy{0} coin_jpy{1} coin_btc{2}'.format( btc_jpy_pairs_item_step,coin_jpy_pairs_item_step,coin_btc_pairs_item_step))

        if debug == True:
            print( '{0} bid(Sell) : {1}'.format('btc_jpy',btc_jpy_ticker['bid']) )
            print( '{0} ask(Buy)  : {1}'.format('btc_jpy',btc_jpy_ticker['ask']) )
            print( '{0} bid(Sell) : {1}'.format(coin_jpy ,coin_jpy_ticker['bid']) )
            print( '{0} ask(Buy)  : {1}'.format(coin_jpy ,coin_jpy_ticker['ask']) )
            print( '{0} bid(Sell) : {1}'.format(coin_btc ,coin_btc_ticker['bid']) )
            print( '{0} ask(Buy)  : {1}'.format(coin_btc ,coin_btc_ticker['ask']) )

##jpy>btc>alt>jpy)    btc/jpy(ask)>alt/btc(ask)>alt/jpy(bid)
        ## btc/jpy <
        amount = int( money / btc_jpy_ticker['ask'] / btc_jpy_pairs_item_step ) * btc_jpy_pairs_item_step
        pay    = amount * btc_jpy_ticker['ask']
        commission = amount * (config.getfloat('coins', 'btc' ))/100
        print  ('jpy>btc in(btc):{0:10} out(jpy):{1:10} commission:{2:10} '.format( str(amount) , str(pay) , str(commission) ))
        jb     = round(amount - commission,8)  ##BTC

        ## xem/btc < 
        amount = int(    jb / coin_btc_ticker['ask'] / coin_btc_pairs_item_step ) * coin_btc_pairs_item_step
        pay   = amount * coin_btc_ticker['ask']
        commission = amount * (config.getfloat('coins', coin ))/100
        print  ('btc>alt in(alt):{0:10} out(btc):{1:10} commission:{2:10} '.format( str(amount) , str(pay) , str(commission) ))
        jba    = round(amount - commission,8)  ##ALT

        ## xem/btc < 
        pay    = int(   jba / coin_jpy_pairs_item_step ) * coin_jpy_pairs_item_step
        amount = pay * coin_jpy_ticker['bid']
        amount = round(amount,8)
        commission = amount * (config.getfloat('coins', coin ))/100
        print  ('alt>jpy in(jpy):{0:10} out(alt):{1:10} commission:{2:10} '.format( str(amount) , str(pay) , str(commission) ))
        jbaj   = round(amount - commission,8)

        Profits_jbaj = (jbaj/money)*100
        print( '{0}jpy > {1}btc > {2}alt > {3}jpy : result {4}%'.format(money,jb,jba,jbaj, Profits_jbaj ))
        
##jpy>alt>btc>jpy    btc/jpy(bid)<alt/btc(bid)<alt/jpy(ask)
        ## xem/jpy <
        amount = int( money / coin_jpy_ticker['ask'] / coin_jpy_pairs_item_step) * coin_jpy_pairs_item_step
        pay   = amount * coin_jpy_ticker['ask']
        commission = amount * config.getfloat('coins', coin ) /100
        print  ('jpy>alt in(alt):{0:10} out(jpy):{1:10} commission:{2:10} '.format( str(amount) , str(pay) , str(commission) ))
        ja     = round(amount - commission,8)

        ## xem/btc >
        pay   =  int( ja / coin_btc_pairs_item_step ) * coin_btc_pairs_item_step
        amount = pay * coin_btc_ticker['bid']
        commission = amount * config.getfloat('coins', coin ) /100
        print  ('alt>btc in(btc):{0:10} out(alt):{1:10} commission:{2:10} '.format( str(amount) , str(pay) , str(commission) ))
        jab    = round(amount - commission,8)

        ## btc/jpy >
        pay    = int( jab / btc_jpy_pairs_item_step ) * btc_jpy_pairs_item_step
        amount = pay *  btc_jpy_ticker['bid']
        commission = amount * config.getfloat('coins', 'btc' ) /100
        print  ('btc>jpy in(jpy):{0:10} out(btc):{1:10} commission:{2:10} '.format( str(amount) , str(pay) , str(commission) ))
        jabj   = round(amount - commission,8)

        Profits_jabj = (jabj/money)*100
        print( '{0}jpy > {1}alt > {2}btc > {3}jpy : result {4}%'.format(money,ja,jab,jabj, Profits_jabj ))

        if Profits_jbaj > 100.5:
            print( '{0} {1}'.format(coin, time.ctime()) )
            print( '{0:>15}_bid {0:>15}_ask {1:>15}_bid {1:>15}_ask {2:>15}_bid {2:>15}_ask '.format('btc_jpy',coin_jpy,coin_btc))
            print( '    {0:>15}     {1:>15}     {2:>15}     {3:>15}     {4:>15}     {5:>15} '.format(btc_jpy_ticker['bid'],btc_jpy_ticker['ask'],coin_jpy_ticker['bid'],coin_jpy_ticker['ask'],coin_btc_ticker['bid'],coin_btc_ticker['ask']))
            print( '{0}jpy > {1}btc > {2}alt > {3}jpy : result {4}%'.format(money,jb,jba,jbaj, Profits_jbaj ))
 
        if Profits_jabj > 100.5:
            print( '{0} {1}'.format(coin, time.ctime()) )
            print( '{0:>15}_bid {0:>15}_ask {1:>15}_bid {1:>15}_ask {2:>15}_bid {2:>15}_ask '.format('btc_jpy',coin_jpy,coin_btc))
            print( '    {0:>15}     {1:>15}     {2:>15}     {3:>15}     {4:>15}     {5:>15} '.format(btc_jpy_ticker['bid'],btc_jpy_ticker['ask'],coin_jpy_ticker['bid'],coin_jpy_ticker['ask'],coin_btc_ticker['bid'],coin_btc_ticker['ask']))
            print( '{0}jpy > {1}alt > {2}btc > {3}jpy : result {4}%'.format(money,ja,jab,jabj, Profits_jabj ))
        time.sleep(1)


#if __name__ == '__main__':
#    zaif = ZaifPublicApi()

#    result = zaif.currency_pairs('all')
#    for i in result:
#       print( i['currency_pair'] )

#    print('---last_price : 終値--')
#    pprint(zaif.last_price('btc_jpy'))
#
#    print('---ticker : ティッカー（集計情報取得）--')
#    pprint(zaif.ticker('btc_jpy'))
#
#    print('---trades : 全ての取引履歴--')
#    print('取得件数：' + str(len(zaif.trades('btc_jpy'))))
#    pprint(zaif.trades('btc_jpy'))
#
#    print('---depth : 板情報--')
#    print('取得件数[買い]：' + str(len(zaif.depth('btc_jpy')['asks'])))
#    print('取得件数[売り]：' + str(len(zaif.depth('btc_jpy')['bids'])))
#    pprint(zaif.depth('btc_jpy'))
#
#    print('---currency_pairs : trade_history等で利用可能な通貨ペア情報--')
#    pprint(zaif.currency_pairs('btc_jpy'))
#
#    print('---currencies : deposit_history等で利用可能な通貨情報--')
#    pprint(zaif.currencies('all'))
